version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: social-support-db-prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: social-support-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Ollama service for LLM
  ollama:
    image: ollama/ollama:latest
    container_name: social-support-ollama-prod
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Main application
  app:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.prod
    container_name: social-support-app-prod
    environment:
      - ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_storage:/app/storage
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Load balancer
  nginx:
    image: nginx:alpine
    container_name: social-support-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ../config/ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - app
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: social-support-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    restart: always

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: social-support-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    networks:
      - app-network
    depends_on:
      - prometheus
    restart: always

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  app_data:
  app_logs:
  app_storage:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
